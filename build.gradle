plugins {
    id 'java-base'
    id 'application'
    id 'org.sonarqube' version '5.0.0.4638'
    id 'jacoco'
    id 'war'
}

sonar {
    properties{
        property 'sonar.login', 'squ_5dd0e8c22caa2f89cb9b4c7358c6c2d0fc55c523'
    }
}

wrapper {
    gradleVersion = gradlewVersion
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'war'

    group = 'com.mjc.school'

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    repositories {
        mavenCentral()
        gradlePluginPortal()
    }

    dependencies {
        implementation "org.springframework.boot:spring-boot-starter-web:2.7.7"
        implementation "org.springframework.boot:spring-boot-starter-hateoas:2.7.7"
        testImplementation 'com.h2database:h2:2.2.224'
        implementation "org.springframework.boot:spring-boot-starter-data-jpa:2.7.7"
        implementation 'org.sonarsource.scanner.maven:sonar-maven-plugin:3.11.0.3922'
    }
    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }
    jacocoTestReport {
        dependsOn test
        reports {
            xml.required = true
        }
    }
}

jacoco {
    toolVersion = "0.8.11"
}

task repack(type: Jar, dependsOn: ':module-web:build') {
    if (findProject(':module-web') != null) {
        entryCompression = ZipEntryCompression.STORED
        def buildJar = zipTree("${project(':module-web').buildDir}/libs/module-web.jar")
        from(buildJar) { into('/') }
        manifest {
            attributes(
                    'Main-Class': 'com.mjc.school.Main'
            )
        }
    }
}

task fatWar(type: War, dependsOn: [':module-repository:build', ':module-service:build', ':module-web:build']) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    if (findProject(':module-repository') != null) {
        entryCompression = ZipEntryCompression.STORED
        def buildWar = zipTree("${project(':module-repository').buildDir}/libs/module-repository.war")
        from(buildWar) { into('/module-repository/') }
    }
    if (findProject(':module-service') != null) {
        entryCompression = ZipEntryCompression.STORED
        def buildWar = zipTree("${project(':module-service').buildDir}/libs/module-service.war")
        from(buildWar) { into('/module-service/') }
    }
    if (findProject(':module-web') != null) {
        entryCompression = ZipEntryCompression.STORED
        def buildJar = zipTree("${project(':module-web').buildDir}/libs/module-web.jar")
        from(buildJar) { into('/module-web/') }
        manifest {
            attributes(
                    'Main-Class': 'com.mjc.school.Main'
            )
        }
    }
    mainClassName = 'com.mjc.school.Main'
}


